-- collect material properties
fn collectNodePros node nodeProsArray =
(
    for i in (getPropNames node) do 
    (    
        local pro = getProperty node i 
        if superClassOf pro != material do
            if superClassOf pro != textureMap do
                if classOf pro != arrayParameter do
                (
                    append nodeProsArray i
                    append nodeProsArray pro
                )
    )
)

-- collect textures data of material
fn collectTexData mat texDataArray =
(
    local texNum = getNumSubTexmaps mat,
          usedTexNum = 0
    
    -- append used texture count
    for j = 1 to texNum do
    (
        local subTex = getSubTexmap mat j
              
        if subTex != undefined do usedTexNum += 1
    )
    append texDataArray usedTexNum
    
    -- append texture data
    for j = 1 to texNum do
    (
        local subTexArray = #(),
              subTexProsArray = #(),
              subTex = getSubTexmap mat j,
              subTexSlotName = getSubTexmapSlotName mat j
        
        if subTex != undefined do
        (
            append subTexArray j
            append subTexArray (classOf subTex)
            
            -- properties
            collectNodePros subTex subTexProsArray
            append subTexArray subTexProsArray
            -- 
            
            append texDataArray subTexArray
            
            -- reuse the function to cycle collecting the texture
            collectTexData subTex subTexArray
        )
    )
)
-- collect all data of material
fn collectObjMatData objMat theArray =
(
    local subMatNum = getNumSubMtls objMat,
          matProsArray = #()
    
    append theArray objMat.name
    append theArray (classOf objMat)
    
    -- properties
    collectNodePros objMat matProsArray
    append theArray matProsArray
    --
    
    -- try to get the .names array 
    try(append theArray objMat.names) catch(append theArray #())
    
    append theArray subMatNum
    
    -- go through each sub-material
    for i = 1 to subMatNum do
    (
        local subMatArray = #(),
              subMat = getSubMtl objMat i
        
        if subMat != undefined do
        (
            append subMatArray i
            -- reuse the function to cycle collecting the material data
            collectObjMatData subMat subMatArray
            append theArray subMatArray
        ) 
    )
    
    collectTexData objMat theArray
)

-- test collectObjMatData function
objMatData = #()
collectObjMatData $.mat objMatData